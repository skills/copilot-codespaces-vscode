<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.60.0/dist/phaser-arcade-physics.min.js"></script>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            touch-action: none;
        }
        #gameContainer {
            position: fixed;
            width: 100%;
            height: 100%;
        }
        .control-btn {
            position: absolute;
            bottom: 20px;
            width: 60px;
            height: 60px;
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <div id="gameContainer"></div>
    <script>
        const config = {
            type: Phaser.AUTO,
            parent: 'gameContainer',
            width: window.innerWidth,
            height: window.innerHeight,
            scene: {
                preload: preload,
                create: create,
                update: update
            },
            physics: {
                default: 'arcade',
                arcade: { gravity: { y: 0 } }
            },
            scale: {
                mode: Phaser.Scale.RESIZE,
                autoCenter: Phaser.Scale.CENTER_BOTH
            }
        };

        let player, coins, enemies, bullets, score = 0;
        let moveLeft = false;
        let moveRight = false;
        const game = new Phaser.Game(config);

        function preload() {
            this.load.image('gus', 'assets/gus.png');
            this.load.image('coin', 'assets/coin.png');
            this.load.image('enemy', 'assets/enemy.png');
            this.load.image('bullet', 'assets/heart.png');
        }

        function create() {
            // Jugador
            player = this.physics.add.sprite(config.width/2, config.height - 100, 'gus');
            player.setCollideWorldBounds(true);

            // Controles t치ctiles
            const leftBtn = this.add.sprite(100, config.height - 100, 'bullet')
                .setInteractive()
                .on('pointerdown', () => moveLeft = true)
                .on('pointerup', () => moveLeft = false);

            const rightBtn = this.add.sprite(config.width - 100, config.height - 100, 'bullet')
                .setInteractive()
                .on('pointerdown', () => moveRight = true)
                .on('pointerup', () => moveRight = false);

            const shootBtn = this.add.sprite(config.width/2, config.height - 100, 'bullet')
                .setInteractive()
                .on('pointerdown', () => {
                    bullets.create(player.x, player.y, 'bullet').setVelocityY(-300);
                });

            // Sistema de juego (similar al anterior pero adaptado)
            // ... (misma l칩gica de monedas, enemigos y colisiones que antes)
            
            // Evento t치ctil general para disparar
            this.input.on('pointerdown', () => {
                bullets.create(player.x, player.y, 'bullet').setVelocityY(-300);
            });
        }

        function update() {
            // Movimiento con controles t치ctiles
            if(moveLeft) player.setVelocityX(-300);
            else if(moveRight) player.setVelocityX(300);
            else player.setVelocityX(0);
        }
    </script>
</body>
</html>